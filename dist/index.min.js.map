{"version":3,"file":"index.min.js","sources":["../src/is.js","../src/reactive.jsx","../src/handle.js","../src/par.js"],"sourcesContent":["// @flow\nexport function isFunction(o: any): boolean {\n    return typeof o === 'function';\n}\n\nexport function isObject(o: any): boolean {\n    return (\n        Boolean(o) &&\n        typeof o === 'object' &&\n        Object.prototype.toString.call(o) === '[object Object]'\n    );\n}\n\nexport function isNil(o: any): boolean {\n    return o === null || o === undefined;\n}\n\nexport function isSame(objA: any, objB: any): boolean {\n    if (objA === objB) {\n        return true;\n    }\n    if (!isObject(objA) || !isObject(objB)) {\n        return false;\n    }\n    const keysA = Object.keys(objA);\n    const keysB = Object.keys(objB);\n    const sameSize = keysA.length === keysB.length;\n    const sameValues = () => keysA.every(key => objA[key] === objB[key]);\n    return sameSize && sameValues();\n}\n","import React, { Component } from 'react';\nimport { BehaviorSubject, of, concat, combineLatest } from 'rxjs';\nimport { filter, distinctUntilChanged, scan } from 'rxjs/operators';\nimport { isObject, isSame } from './is';\n\nexport function reactive(propsMapper) {\n    return WrappedComponent =>\n        class ReactiveWrapper extends Component {\n            static displayName = `Reactive(${WrappedComponent.displayName ||\n                WrappedComponent.name})`;\n\n            constructor(props) {\n                super(props);\n                this.state = props;\n            }\n\n            componentDidMount() {\n                this.propsSubject = new BehaviorSubject(this.props);\n                const props$ = this.propsSubject.pipe(distinctUntilChanged(isSame));\n                const deltaProps$ = propsMapper(props$).pipe(\n                    filter(isObject),\n                    scan((acc, delta) => Object.assign(acc, delta), {}),\n                );\n                const newProps$ = combineLatest(\n                    props$,\n                    concat(of({}), deltaProps$),\n                    (props, delta) => Object.assign({}, props, delta),\n                );\n                this.subscription = newProps$.subscribe((newProps) => {\n                    this.setState(newProps);\n                });\n            }\n\n            componentDidUpdate() {\n                this.propsSubject.next(this.props);\n            }\n\n            componentWillUnmount() {\n                this.propsSubject.complete();\n                this.subscription.unsubscribe();\n            }\n\n            render() {\n                return <WrappedComponent {...this.state} />;\n            }\n        };\n}\n","import { Subject, of, concat } from 'rxjs';\nimport { filter, pluck, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { isFunction, isObject } from './is';\n\nexport function handle(propName, ...handlerOperators) {\n    return props$ =>\n        props$.pipe(\n            pluck(propName),\n            distinctUntilChanged(),\n            switchMap((handler) => {\n                const eventsSubject = new Subject();\n                const wrappedHandler = (event) => {\n                    eventsSubject.next(event);\n                    if (isFunction(handler)) handler(event);\n                };\n                return concat(\n                    of({\n                        [propName]: wrappedHandler,\n                    }),\n                    eventsSubject.pipe(\n                        ...handlerOperators,\n                        filter(obj => !(obj instanceof Event)),\n                        filter(isObject),\n                    ),\n                );\n            }),\n        );\n}\n","import { merge } from 'rxjs';\n\nexport function par(...operators) {\n    return props$ => merge(...operators.map(op => op(props$)));\n}\n"],"names":["isFunction","o","isObject","Boolean","Object","prototype","toString","call","isSame","objA","objB","keysA","keys","keysB","length","sameValues","every","key","reactive","propsMapper","props","_Component","state","componentDidMount","propsSubject","BehaviorSubject","this","props$","pipe","distinctUntilChanged","deltaProps$","filter","scan","acc","delta","assign","newProps$","combineLatest","concat","of","subscription","subscribe","newProps","setState","componentDidUpdate","next","componentWillUnmount","complete","unsubscribe","render","React","WrappedComponent","Component","displayName","name","handle","propName","handlerOperators","pluck","switchMap","handler","eventsSubject","Subject","wrappedHandler","event","obj","Event","par","operators","merge","map","op","isNil"],"mappings":"siBACO,SAASA,WAAWC,SACH,mBAANA,EAGX,SAASC,SAASD,UAEjBE,QAAQF,IACK,qBAANA,gBAAAA,KAC+B,oBAAtCG,OAAOC,UAAUC,SAASC,KAAKN,GAQhC,SAASO,OAAOC,EAAWC,MAC1BD,IAASC,SACF,MAENR,SAASO,KAAUP,SAASQ,UACtB,MAELC,EAAQP,OAAOQ,KAAKH,GACpBI,EAAQT,OAAOQ,KAAKF,UACTC,EAAMG,SAAWD,EAAMC,QACrB,SAAbC,oBAAmBJ,EAAMK,MAAM,mBAAOP,EAAKQ,KAASP,EAAKO,KAC5CF,cCvBhB,SAASG,SAASC,UACd,oEAKaC,oSACRC,YAAMD,aACDE,MAAQF,kXAGjBG,+DACSC,aAAe,IAAIC,kBAAgBC,KAAKN,WACvCO,EAASD,KAAKF,aAAaI,KAAKC,uBAAqBrB,SACrDsB,EAAcX,EAAYQ,GAAQC,KACpCG,SAAO7B,UACP8B,OAAK,SAACC,EAAKC,UAAU9B,OAAO+B,OAAOF,EAAKC,IAAQ,KAE9CE,EAAYC,gBACdV,EACAW,SAAOC,KAAG,IAAKT,GACf,SAACV,EAAOc,UAAU9B,OAAO+B,OAAO,GAAIf,EAAOc,UAE1CM,aAAeJ,EAAUK,UAAU,SAACC,KAChCC,SAASD,gCAItBE,sDACSpB,aAAaqB,KAAKnB,KAAKN,kCAGhC0B,0DACStB,aAAauB,gBACbP,aAAaQ,yCAGtBC,gCACWC,gBAACC,EAAqBzB,KAAKJ,yBApCZ8B,eACnBC,yBAA0BF,EAAiBE,aAC9CF,EAAiBG,uBCL1B,SAASC,OAAOC,8BAAaC,0DACzB,mBACH9B,EAAOC,KACH8B,QAAMF,GACN3B,yBACA8B,YAAU,SAACC,SACDC,EAAgB,IAAIC,iBAKnBxB,SACHC,aACKiB,GANc,SAAjBO,eAAkBC,KACNnB,KAAKmB,GACfhE,WAAW4D,IAAUA,EAAQI,QAMjCH,EAAcjC,aACP6B,UACH1B,SAAO,oBAASkC,aAAeC,SAC/BnC,SAAO7B,kCCpBfiE,iCAAOC,gDACZ,mBAAUC,qBAASD,EAAUE,IAAI,mBAAMC,EAAG5C,4DHU9C,SAAS6C,MAAMvE,UACXA,MAAAA"}